{"ast":null,"code":"import _slicedToArray from \"C:/Users/B\\xE9r\\xE9nice/Documents/nodeJS/new_one_the_night/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"C:/Users/B\\xE9r\\xE9nice/Documents/nodeJS/new_one_the_night/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\B\\xE9r\\xE9nice\\\\Documents\\\\nodeJS\\\\new_one_the_night\\\\src\\\\index.tsx\",\n    _s = $RefreshSig$();\n\n/**Dialogue-based Game \"The Night\"\r\n\r\n    Author: Vladislav Maraev\r\n    Modifications by: Bérénice Le Glouanec\r\n    Date of modification: 03/2021\r\n    Course: LT2216 NML 50 DAG\r\n\r\n    This typescript index file is modificated as part of a university project.\r\n**/\n//Imports\nimport \"./styles.scss\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { Machine, assign, send } from \"xstate\";\nimport { useMachine, asEffect } from \"@xstate/react\";\nimport { inspect } from \"@xstate/inspect\";\nimport { dmMachine } from \"./dmTheNight\";\ninspect({\n  url: \"https://statecharts.io/inspect\",\n  iframe: false\n});\nimport { useSpeechSynthesis, useSpeechRecognition } from 'react-speech-kit';\nimport Confetti from 'react-dom-confetti';\nimport MouseParticles from 'react-mouse-particles'; //Main Machine\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst machine = Machine({\n  id: 'root',\n  type: 'parallel',\n  states: {\n    dm: _objectSpread({}, dmMachine),\n    asrtts: {\n      initial: 'idle',\n      states: {\n        idle: {\n          on: {\n            LISTEN: 'recognising',\n            SPEAK: {\n              target: 'speaking',\n              actions: assign((_context, event) => {\n                return {\n                  ttsAgenda: event.value\n                };\n              })\n            }\n          }\n        },\n        recognising: {\n          initial: 'progress',\n          entry: 'recStart',\n          exit: 'recStop',\n          on: {\n            ASRRESULT: {\n              actions: ['recLogResult', assign((_context, event) => {\n                return {\n                  recResult: event.value\n                };\n              })],\n              target: '.match'\n            },\n            RECOGNISED: 'idle'\n          },\n          states: {\n            progress: {},\n            match: {\n              entry: send('RECOGNISED')\n            }\n          }\n        },\n        speaking: {\n          entry: 'ttsStart',\n          on: {\n            ENDSPEECH: 'idle'\n          }\n        }\n      }\n    }\n  }\n}, {\n  actions: {\n    recLogResult: context => {\n      /* context.recResult = event.recResult; */\n      console.log('<< ASR: ' + context.recResult);\n    },\n    test: () => {\n      console.log('test');\n    },\n    logIntent: context => {\n      /* context.nluData = event.data */\n      console.log('<< NLU intent: ' + context.nluData.intent.name);\n    }\n  }\n});\n\nconst ReactiveButton = props => {\n  switch (true) {\n    //Button when listening\n    case props.state.matches({\n      asrtts: 'recognising'\n    }):\n      return /*#__PURE__*/_jsxDEV(\"button\", _objectSpread(_objectSpread({\n        type: \"button\",\n        className: \"glow-on-hover\",\n        style: {\n          animation: \"glowing 20s linear\"\n        }\n      }, props), {}, {\n        children: \"Time to answer...\"\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }, this);\n    //Button when speaking\n\n    case props.state.matches({\n      asrtts: 'speaking'\n    }):\n      return /*#__PURE__*/_jsxDEV(\"button\", _objectSpread(_objectSpread({\n        type: \"button\",\n        className: \"glow-on-hover\",\n        style: {\n          animation: \"bordering 1s infinite\"\n        }\n      }, props), {}, {\n        children: \"Listen carefully...\"\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }, this);\n\n    default:\n      return /*#__PURE__*/_jsxDEV(\"button\", _objectSpread(_objectSpread({\n        type: \"button\",\n        className: \"glow-on-hover\"\n      }, props), {}, {\n        children: \"The Night\"\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }, this);\n  }\n};\n\n_c = ReactiveButton;\n\nfunction App() {\n  _s();\n\n  //Text to speech\n  const _useSpeechSynthesis = useSpeechSynthesis({\n    onEnd: () => {\n      send('ENDSPEECH');\n    }\n  }),\n        speak = _useSpeechSynthesis.speak,\n        cancel = _useSpeechSynthesis.cancel,\n        speaking = _useSpeechSynthesis.speaking; //Speech to text\n\n\n  const _useSpeechRecognition = useSpeechRecognition({\n    onResult: result => {\n      send({\n        type: \"ASRRESULT\",\n        value: result\n      });\n    }\n  }),\n        listen = _useSpeechRecognition.listen,\n        listening = _useSpeechRecognition.listening,\n        stop = _useSpeechRecognition.stop;\n\n  const _useMachine = useMachine(machine, {\n    devTools: true,\n    actions: {\n      recStart: asEffect(() => {\n        console.log('Listening...');\n        listen({\n          interimResults: false,\n          continuous: true\n        });\n      }),\n      recStop: asEffect(() => {\n        console.log('Recognition stopped.');\n        stop();\n      }),\n      ttsStart: asEffect((context, effect) => {\n        console.log('Speaking...');\n        speak({\n          text: context.ttsAgenda\n        });\n      }),\n      ttsCancel: asEffect((context, effect) => {\n        console.log('TTS STOP...');\n        cancel();\n      })\n      /* speak: asEffect((context) => {\r\n       * console.log('Speaking...');\r\n       *     speak({text: context.ttsAgenda })\r\n       * } */\n\n    }\n  }),\n        _useMachine2 = _slicedToArray(_useMachine, 3),\n        current = _useMachine2[0],\n        send = _useMachine2[1],\n        service = _useMachine2[2];\n\n  const confettiEverywhere = current.context.confettiEverywhere;\n  const config = {\n    top: \"50%\",\n    left: \"50%\",\n    position: \"fixed\",\n    angle: 90,\n    spread: 360,\n    startVelocity: 50,\n    elementCount: 70,\n    dragFriction: 0.12,\n    duration: 3000,\n    stagger: 3,\n    width: \"10px\",\n    height: \"10px\",\n    perspective: \"500px\",\n    colors: [\"#a864fd\", \"#29cdff\", \"#78ff44\", \"#ff718d\", \"#fdff6a\"]\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"item\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Confetti, {\n        active: confettiEverywhere,\n        config: config\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ReactiveButton, {\n        state: current,\n        onClick: () => send('CLICK')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(MouseParticles, {\n        g: 1,\n        color: \"random\",\n        cull: \"col,image-wrapper\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 175,\n    columnNumber: 9\n  }, this);\n}\n\n_s(App, \"RIIO137itlHAPnsUEd30120dxYQ=\", false, function () {\n  return [useSpeechSynthesis, useSpeechRecognition, useMachine];\n});\n\n_c2 = App;\n;\n/* RASA API\r\n *  */\n\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = 'https://nlu-heroku.herokuapp.com/model/parse/';\nexport const nluRequest = text => fetch(new Request(proxyurl + rasaurl, {\n  method: 'POST',\n  //headers: { 'Origin': 'http://maraev.me' }, // only required with proxy\n  headers: {\n    'Origin': 'http://localhost:3000/'\n  },\n  body: \"{\\\"text\\\": \\\"\".concat(text, \"\\\"}\")\n})).then(data => data.json());\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render( /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 201,\n  columnNumber: 5\n}, this), rootElement);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ReactiveButton\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"sources":["C:/Users/Bérénice/Documents/nodeJS/new_one_the_night/src/index.tsx"],"names":["React","ReactDOM","Machine","assign","send","useMachine","asEffect","inspect","dmMachine","url","iframe","useSpeechSynthesis","useSpeechRecognition","Confetti","MouseParticles","machine","id","type","states","dm","asrtts","initial","idle","on","LISTEN","SPEAK","target","actions","_context","event","ttsAgenda","value","recognising","entry","exit","ASRRESULT","recResult","RECOGNISED","progress","match","speaking","ENDSPEECH","recLogResult","context","console","log","test","logIntent","nluData","intent","name","ReactiveButton","props","state","matches","animation","App","onEnd","speak","cancel","onResult","result","listen","listening","stop","devTools","recStart","interimResults","continuous","recStop","ttsStart","effect","text","ttsCancel","current","service","confettiEverywhere","config","top","left","position","angle","spread","startVelocity","elementCount","dragFriction","duration","stagger","width","height","perspective","colors","proxyurl","rasaurl","nluRequest","fetch","Request","method","headers","body","then","data","json","rootElement","document","getElementById","render"],"mappings":"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","sourcesContent":["/**Dialogue-based Game \"The Night\"\r\n\r\n    Author: Vladislav Maraev\r\n    Modifications by: Bérénice Le Glouanec\r\n    Date of modification: 03/2021\r\n    Course: LT2216 NML 50 DAG\r\n\r\n    This typescript index file is modificated as part of a university project.\r\n**/\r\n\r\n//Imports\r\nimport \"./styles.scss\";\r\nimport * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\nimport { Machine, assign, send, State } from \"xstate\";\r\nimport { useMachine, asEffect } from \"@xstate/react\";\r\nimport { inspect } from \"@xstate/inspect\";\r\nimport { dmMachine } from \"./dmTheNight\";\r\ninspect({ url: \"https://statecharts.io/inspect\", iframe: false });\r\nimport { useSpeechSynthesis, useSpeechRecognition } from 'react-speech-kit';\r\nimport Confetti from 'react-dom-confetti';\r\nimport MouseParticles from 'react-mouse-particles';\r\n\r\n//Main Machine\r\nconst machine = Machine<SDSContext, any, SDSEvent>(\r\n    {\r\n        id: 'root',\r\n        type: 'parallel',\r\n        states: {\r\n            dm: { ...dmMachine },\r\n            asrtts: {\r\n                initial: 'idle',\r\n                states: {\r\n                    idle: {\r\n                        on: {\r\n                            LISTEN: 'recognising',\r\n                            SPEAK: {\r\n                                target: 'speaking',\r\n                                actions: assign((_context, event) => { return { ttsAgenda: event.value } })\r\n                            }\r\n                        }\r\n                    },\r\n                    recognising: {\r\n                        initial: 'progress',\r\n                        entry: 'recStart',\r\n                        exit: 'recStop',\r\n                        on: {\r\n                            ASRRESULT: {\r\n                                actions: ['recLogResult',\r\n                                    assign((_context, event) => { return { recResult: event.value } })],\r\n                                target: '.match'\r\n                            },\r\n                            RECOGNISED: 'idle',\r\n                        },\r\n                        states: {\r\n                            progress: {},                          \r\n                            match: { entry: send('RECOGNISED'), },\r\n                        }\r\n                    },\r\n                    speaking: {\r\n                        entry: 'ttsStart',\r\n                        on: { ENDSPEECH: 'idle', }\r\n                    }\r\n                }\r\n            }\r\n        },\r\n    },\r\n    {\r\n        actions: {\r\n            recLogResult: (context: SDSContext) => {\r\n                /* context.recResult = event.recResult; */\r\n                console.log('<< ASR: ' + context.recResult);\r\n            },\r\n            test: () => {\r\n                console.log('test')\r\n            },\r\n            logIntent: (context: SDSContext) => {\r\n                /* context.nluData = event.data */\r\n                console.log('<< NLU intent: ' + context.nluData.intent.name)\r\n            }\r\n        },\r\n    }\r\n);\r\n\r\n\r\ninterface Props extends React.HTMLAttributes<HTMLElement> { state: State<SDSContext, any, any, any>; }\r\nconst ReactiveButton = (props: Props): JSX.Element => {\r\n    switch (true) {\r\n        //Button when listening\r\n        case props.state.matches({ asrtts: 'recognising' }):\r\n            return (\r\n                <button type=\"button\" className=\"glow-on-hover\"\r\n                    style={{ animation: \"glowing 20s linear\" }} {...props}>\r\n                    Time to answer...\r\n                </button>\r\n            );\r\n        //Button when speaking\r\n        case props.state.matches({ asrtts: 'speaking' }):\r\n            return (\r\n                <button type=\"button\" className=\"glow-on-hover\"\r\n                    style={{ animation: \"bordering 1s infinite\" }} {...props}>\r\n                    Listen carefully...\r\n                </button>\r\n            );\r\n        default:\r\n            return (\r\n                <button type=\"button\" className=\"glow-on-hover\" {...props}>\r\n                    The Night\r\n                </button >\r\n            );\r\n    }\r\n}\r\n\r\nfunction App() {\r\n    //Text to speech\r\n    const { speak, cancel, speaking } = useSpeechSynthesis({\r\n        onEnd: () => {\r\n            send('ENDSPEECH');\r\n        },\r\n    });\r\n    //Speech to text\r\n    const { listen, listening, stop } = useSpeechRecognition({\r\n        onResult: (result: any) => {\r\n            send({ type: \"ASRRESULT\", value: result });\r\n        },\r\n    });\r\n    const [current, send, service] = useMachine(machine, {\r\n        devTools: true,\r\n        actions: {\r\n            recStart: asEffect(() => {\r\n                console.log('Listening...');\r\n                listen({\r\n                    interimResults: false,\r\n                    continuous: true\r\n                });\r\n            }),\r\n            recStop: asEffect(() => {\r\n                console.log('Recognition stopped.');\r\n                stop()\r\n            }),\r\n            ttsStart: asEffect((context, effect) => {\r\n                console.log('Speaking...');\r\n                speak({ text: context.ttsAgenda })\r\n            }),\r\n            ttsCancel: asEffect((context, effect) => {\r\n                console.log('TTS STOP...');\r\n                cancel()\r\n            })\r\n            /* speak: asEffect((context) => {\r\n             * console.log('Speaking...');\r\n             *     speak({text: context.ttsAgenda })\r\n             * } */\r\n        }\r\n    });\r\n\r\n    const { confettiEverywhere } = current.context;\r\n    const config = {\r\n        top: \"50%\",\r\n        left: \"50%\",\r\n        position: \"fixed\",\r\n        angle: 90,\r\n        spread: 360,\r\n        startVelocity: 50,\r\n        elementCount: 70,\r\n        dragFriction: 0.12,\r\n        duration: 3000,\r\n        stagger: 3,\r\n        width: \"10px\",\r\n        height: \"10px\",\r\n        perspective: \"500px\",\r\n        colors: [\"#a864fd\", \"#29cdff\", \"#78ff44\", \"#ff718d\", \"#fdff6a\"]\r\n    };\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <div className=\"container\">\r\n                <div className=\"item\"/>\r\n                <Confetti active = { confettiEverywhere } config = { config }/>\r\n                <ReactiveButton state={current} onClick={() => send('CLICK')}/>\r\n                <MouseParticles g={1} color=\"random\" cull=\"col,image-wrapper\"/>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\n/* RASA API\r\n *  */\r\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\r\nconst rasaurl = 'https://nlu-heroku.herokuapp.com/model/parse/';\r\nexport const nluRequest = (text: string) =>\r\n    fetch(new Request(proxyurl + rasaurl, {\r\n        method: 'POST',\r\n        //headers: { 'Origin': 'http://maraev.me' }, // only required with proxy\r\n        headers: { 'Origin': 'http://localhost:3000/' },\r\n        body: `{\"text\": \"${text}\"}`\r\n    }))\r\n        .then(data => data.json());\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(\r\n    <App />,\r\n    rootElement);"]},"metadata":{},"sourceType":"module"}